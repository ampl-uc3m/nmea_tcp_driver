#! /usr/bin/env python

# Software License Agreement (BSD License)
#
# Copyright (c) 2013, Eric Perko
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the     above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the names of the authors nor the names of their
#    affiliated organizations may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import serial
import socket               # Import socket module
import os                   #import libraries necessary for running the ifconfigg.sh file
import sys
import libnmea_navsat_driver.driver
import numpy as np
import rospy
import tf
from sensor_msgs.msg import Imu
from geometry_msgs.msg import PoseStamped

if __name__ == '__main__':
    rospy.init_node('nmea_tcp_driver')

    imu_pub = rospy.Publisher("gps_imu", Imu, queue_size=5)
    imu_pose_pub = rospy.Publisher("gps_imu_pose", PoseStamped, queue_size=5)

    s = socket.socket()         # Create a socket object
    host = rospy.get_param('~host', '192.168.1.97')
    port = rospy.get_param('~port', 5017)

    s.connect((host, port))
    print "Device Connected"
    # frame_id = libnmea_navsat_driver.driver.RosNMEADriver.get_frame_id()
    frame_id = "insia_gps"

    try:
        GPS = s.recv(1024)
        driver = libnmea_navsat_driver.driver.RosNMEADriver()
        roll = 0
        pitch = 0
        while not rospy.is_shutdown():
            GPS = s.recv(1024)
            data = GPS.strip()    
    	    split = data.split()
            data = split[0]
            for i in range(len(split)):
                # print('Split ', i, ': ', split[i])
                splitsplit = split[i].split(',')
                # for j in range(len(splitsplit)):
                #     print('Split ', i, j, ': ', splitsplit[j])

                # if splitsplit[0] == '$GPHDT':
                #     print('Heading 1: ', splitsplit[1])
                # if splitsplit[0] == '$GPGST':
                #     print('GPGST: ', splitsplit)
                # if splitsplit[0] == '$GPROT':
                #     print('Yaw Rate: ', splitsplit[1], splitsplit[2])
                # if splitsplit[0] == '$RMC':
                #         print('*** RMC: ', splitsplit)
                # if splitsplit[0] == '$ROT':
                #         print('*** ROT: ', splitsplit)
                if splitsplit[0] == '$PASHR':
                       # print('*** PASHR: ', splitsplit)
                        pitch = np.deg2rad(float(splitsplit[5])) if splitsplit[5] else 0.0
                        roll = np.deg2rad(float(splitsplit[7])) if splitsplit[7] else 0.0
                if splitsplit[0] == '$PTNL':
                    if splitsplit[1] == 'AVR':
                        print('*** IMU: ', splitsplit)
                        # print('$PTNL AVR ', i, ': ', splitsplit)
                        # print('Heading 2: ', splitsplit[3])
                        # print('Tilt: ', splitsplit[5])
                        # print('Roll: ', splitsplit[7])
                        yaw = np.deg2rad(float(splitsplit[3]))
                        imu_msg = Imu()
                        imu_pose_msg = PoseStamped()
                        imu_msg.header.frame_id = frame_id
                        imu_msg.header.stamp = rospy.Time.now()
                        x, y, z, w = tf.transformations.quaternion_from_euler(roll, pitch, yaw)
                        imu_msg.orientation.x = x
                        imu_msg.orientation.y = y
                        imu_msg.orientation.z = z
                        imu_msg.orientation.w = w
                        imu_pub.publish(imu_msg)
                        imu_pose_msg.header.frame_id = frame_id
                        imu_pose_msg.pose.orientation = imu_msg.orientation
                        imu_pose_pub.publish(imu_pose_msg)
    	    for el in split:
    		  if 'GNGGA' in el:
    		      data = el
    		      break
    		  elif 'RMC' in el:
    		      data = el           
        

            try:
                driver.add_sentence(data, frame_id)
            except ValueError as e:
                rospy.logwarn("Value error, likely due to missing fields in the NMEA message. Error was: %s. Please report this issue at github.com/ros-drivers/nmea_navsat_driver, including a bag file with the NMEA sentences that caused it." % e)

    except rospy.ROSInterruptException:
        GPS.close           #Close GPS socket when done
